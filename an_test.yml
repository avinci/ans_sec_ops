- hosts: localhost
  connection: local
  gather_facts: False

  vars:
    uberCIDRBlock: "10.10.0.0/16"
    publicSNCIDRBlock: "10.10.0.0/24"
    numbers:
      - name: "first"
        int: "1"
      - name: "second"
        int: "2"

  tasks:
#    - debug:
#        var: "{{ item.0 }}"
#      with_indexed_items: "{{ numbers }}"


    - name: indexed loop demo
      debug:
        msg: "at array position {{ item.0 }} there is a value {{ item.1.name }}"
      with_indexed_items:
        - "{{ numbers }}"

#    - name: Register output
#      command: "/bin/echo {{ item.int }}"
#      register: echo_out
#      with_items: "{{ numbers }}"
#
##    - debug: msg="item.item={{item.item.name}}, item.stdout={{item.stdout}}"
##      with_items: "{{ echo_out.results }}"
#
#    - debug: msg="{{ item.start }}"
#      with_items: "{{ echo_out.results }}"

#    - name: Create VPC
#      ec2_vpc_net:
#        name: avinci_vpc
#        cidr_block: "{{ uberCIDRBlock }}"
#        region: us-east-1
#        tags:
#          module: avinci_vpc
#        tenancy: dedicated
#      register: vpc
#
#    - name: Create subnet for public access
#      ec2_vpc_subnet:
#        vpc_id: "{{ vpc.vpc.id }}"
#        cidr: "{{ publicSNCIDRBlock }}"
#        resource_tags:
#          Name: publicSN
#      register: publicSN
#
#    - name: Create internet gateway
#      ec2_vpc_igw:
#        vpc_id: "{{ vpc.vpc.id }}"
#      register: igw
#
#    - name: Set up public subnet route table
#      ec2_vpc_route_table:
#        vpc_id: "{{ vpc.vpc.id }}"
#        tags:
#          Name: Public
#        subnets:
#          - "{{ publicSN.subnet.id }}"
#        routes:
#          - dest: 0.0.0.0/0
#            gateway_id: "{{ igw.gateway_id }}"
#      register: publicRT
#
#    - name: public ec2 group
#      ec2_group:
#        name: publicSG
#        description: Public access Security Group
#        vpc_id: "{{ vpc.vpc.id }}"
#        rules:
#          - proto: tcp
#            from_port: 80
#            to_port: 80
#            cidr_ip: 0.0.0.0/0
#          - proto: tcp
#            from_port: 22
#            to_port: 22
#            cidr_ip: 0.0.0.0/0
#          - proto: tcp
#            from_port: 8080
#            to_port: 8080
#            cidr_ip: 0.0.0.0/0
#          - proto: tcp
#            from_port: 0
#            to_port: 65535
#            cidr_ip: "{{ publicSNCIDRBlock }}"
#      register: publicSG

#    - name: Create IAM role with policy
#      iam_role:
#        name: demoECSRole
#        assume_role_policy_document: "{{ lookup('file','iam_role.json') }}"
#        state: present
#      register: demoECSRole
#
#    - debug:
#        var: demoECSRole

#    - name: Assign a policy called Admin to the demoECSRole role
#      iam_policy:
#        iam_type: role
#        iam_name: "{{ demoECSRole.role.name}}"
#        policy_name: Admin
#        state: present
#        policy_document: admin_policy.json


#    - debug:
#        var: publicSN
#
#    - name: create file
#      file:
#        dest: /tmp/foo
#        state: touch
#      delegate_to: localhost
#
#    - name: run cmd
#      shell: echo "{{ publicSN.subnet | to_nice_json }}"
#      register: op
#
#    - name: append
#      lineinfile:
#        dest: /tmp/foo
#        line: "{{ op.stdout }}"
#        insertafter: EOF
#      delegate_to: localhost


#    - name: set config
#      shell: "echo $TEMP_CONFIG"
#      environment:
#        TEMP_CONFIG: "{{ public_subnet.subnet.id }}"
#      tags: something
#      register: shell_echo
#
#    - debug:
#        var: shell_echo.stdout


#    - name: Provision a set of instances
#      ec2:
#         key_name: demo-key
#         region: us-east-1
#         group: default
#         vpc_subnet_id: subnet-3cca0158
#         instance_type: t2.micro
#         image: ami-cd0f5cb6
#         assign_public_ip: yes
#         wait: true
#         exact_count: 0
#         count_tag:
#            Name: Demo
#         instance_tags:
#            Name: Demo
#            FOO: avinci
#      register: avinci

#    - name: Add all instance public IPs to host group
#      add_host: hostname={{ item.public_ip }} groups=ec2hosts
#      with_items: "{{ avinci.instances }}"
